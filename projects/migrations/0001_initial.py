# Generated by Django 2.2.2 on 2020-04-29 02:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import dm_apps.custom_widgets
import projects.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('shared_models', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BudgetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('cost_type', models.IntegerField(choices=[(1, 'Salary'), (2, 'O&M')])),
                ('exclude_from_rollup', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FunctionalGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('sections', models.ManyToManyField(blank=True, related_name='functional_groups', to='shared_models.Section')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('nom', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'ordering': ['funding_source_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FundingSourceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('color', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HelpText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('eng_text', models.TextField(verbose_name='English text')),
                ('fra_text', models.TextField(blank=True, null=True, verbose_name='French text')),
            ],
            options={
                'ordering': ['field_name'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OMCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('group', models.IntegerField(choices=[(1, 'Travel'), (2, 'Equipment Purchase'), (3, 'Material and Supplies'), (4, 'Human Resources'), (5, 'Contracts, Leases, Services'), (6, 'Other')])),
            ],
            options={
                'ordering': ['group', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('national_responsibility_eng', models.CharField(blank=True, max_length=255, null=True, verbose_name='National responsibilty (English)')),
                ('national_responsibility_fra', models.CharField(blank=True, max_length=255, null=True, verbose_name='National responsibilty (French)')),
                ('program_inventory', models.CharField(blank=True, max_length=255, null=True, verbose_name='program inventory')),
                ('funding_source_and_type', models.CharField(blank=True, max_length=255, null=True)),
                ('regional_program_name_eng', models.CharField(blank=True, max_length=255, null=True, verbose_name='regional program name (English)')),
                ('regional_program_name_fra', models.CharField(blank=True, max_length=255, null=True, verbose_name='regional program name (French)')),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_core', models.BooleanField(choices=[(True, 'Core'), (False, 'Flex')], verbose_name='Is program core or flex?')),
                ('examples', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['national_responsibility_eng', 'regional_program_name_eng'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_title', dm_apps.custom_widgets.OracleTextField(verbose_name='Project title')),
                ('is_national', models.NullBooleanField(choices=[(None, 'Unknown'), (True, 'National'), (False, 'Regional')], default=False, verbose_name='National or regional?')),
                ('is_competitive', models.NullBooleanField(default=False, verbose_name='Is the funding competitive?')),
                ('is_approved', models.NullBooleanField(verbose_name='Has this project already been approved')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start date of project')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date of project')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Project objective & description')),
                ('priorities', models.TextField(blank=True, null=True, verbose_name='Project-specific priorities')),
                ('deliverables', models.TextField(blank=True, null=True, verbose_name='Project deliverables / activities')),
                ('data_collection', models.TextField(blank=True, null=True, verbose_name='What type of data will be collected')),
                ('data_sharing', models.TextField(blank=True, null=True, verbose_name='Which of these data / data products will be placed on the Open Data Platform this year?')),
                ('data_storage', models.TextField(blank=True, null=True, verbose_name='Data storage / archiving Plan')),
                ('metadata_url', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Provide link to existing metadata record, if available')),
                ('regional_dm_needs', models.TextField(blank=True, null=True, verbose_name='Describe assistance required from the branch data manager, if applicable')),
                ('sectional_dm_needs', models.TextField(blank=True, null=True, verbose_name='Describe assistance required from the section data manager, if applicable')),
                ('vehicle_needs', models.TextField(blank=True, null=True, verbose_name='Describe need for vehicle (type of vehicle, number of weeks, time-frame)')),
                ('it_needs', models.TextField(blank=True, null=True, verbose_name='Special IT requirements (software, licenses, hardware)')),
                ('chemical_needs', models.TextField(blank=True, null=True, verbose_name='Please provide details regarding chemical needs and the plan for storage and disposal.')),
                ('ship_needs', models.TextField(blank=True, null=True, verbose_name='Ship (Coast Guard, charter vessel) Requirements')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='additional notes')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='Do you have any feedback you would like to submit about this process')),
                ('submitted', models.BooleanField(default=False, verbose_name='Submit project for review')),
                ('approved', models.BooleanField(default=False, verbose_name='approved')),
                ('recommended_for_funding', models.BooleanField(default=False, verbose_name='recommended')),
                ('meeting_notes', models.TextField(blank=True, null=True, verbose_name='administrative notes')),
                ('is_hidden', models.NullBooleanField(default=False, verbose_name='Should the project be hidden from other users?')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('activity_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='projects.ActivityType', verbose_name='activity type')),
                ('allotment_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects_projects', to='shared_models.AllotmentCode', verbose_name='allotment code (if known)')),
                ('default_funding_source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='projects.FundingSource', verbose_name='primary funding source')),
                ('existing_project_codes', models.ManyToManyField(blank=True, to='shared_models.Project', verbose_name='existing project codes (if known)')),
                ('functional_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='projects.FunctionalGroup', verbose_name='Functional group')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('programs', models.ManyToManyField(blank=True, related_name='projects', to='projects.Program', verbose_name='Science regional program name(s)')),
                ('responsibility_center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects_projects', to='shared_models.ResponsibilityCenter', verbose_name='responsibility center (if known)')),
                ('section', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='shared_models.Section', verbose_name='section')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_for', models.IntegerField(choices=[(1, 'Projects'), (2, 'Status reports'), (3, 'Milestones')])),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('color', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'ordering': ['used_for', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('nom', models.CharField(blank=True, max_length=255, null=True, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StatusReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major_accomplishments', models.TextField(blank=True, null=True, verbose_name='major accomplishments (this can be left blank if reported at the milestone level)')),
                ('major_issues', models.TextField(blank=True, null=True, verbose_name='major issues encountered')),
                ('target_completion_date', models.DateTimeField(blank=True, null=True, verbose_name='target completion date')),
                ('rationale_for_modified_completion_date', models.TextField(blank=True, null=True, verbose_name='rationale for a modified completion date')),
                ('general_comment', models.TextField(blank=True, null=True, verbose_name='general comments')),
                ('section_head_comment', models.TextField(blank=True, null=True, verbose_name='section head comment')),
                ('section_head_reviewed', models.BooleanField(default=False, verbose_name='reviewed by section head')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='projects.Project')),
                ('status', models.ForeignKey(limit_choices_to={'used_for': 2}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reports', to='projects.Status')),
            ],
            options={
                'ordering': ['date_created'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='status',
            field=models.ForeignKey(blank=True, limit_choices_to={'used_for': 1}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='projects.Status', verbose_name='project status'),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='projects', to='projects.Tag', verbose_name='Tags / keywords (used for searching)'),
        ),
        migrations.AddField(
            model_name='project',
            name='year',
            field=models.ForeignKey(blank=True, default=2022, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='projects', to='shared_models.FiscalYear', verbose_name='fiscal year'),
        ),
        migrations.AddField(
            model_name='program',
            name='theme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='programs', to='projects.Theme'),
        ),
        migrations.CreateModel(
            name='OMCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('budget_requested', models.FloatField(default=0, verbose_name='budget requested')),
                ('funding_source', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='om_costs', to='projects.FundingSource', verbose_name='funding source')),
                ('om_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='om_costs', to='projects.OMCategory', verbose_name='category')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='om_costs', to='projects.Project', verbose_name='project')),
            ],
            options={
                'ordering': ['om_category'],
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='projects.Project')),
            ],
            options={
                'ordering': ['project', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GCCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_org', models.CharField(blank=True, max_length=255, null=True, verbose_name='Recipient organization')),
                ('project_lead', models.CharField(blank=True, max_length=255, null=True, verbose_name='project lead')),
                ('proposed_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Proposed title of agreement')),
                ('gc_program', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name of G&C program')),
                ('budget_requested', models.FloatField(default=0, verbose_name='budget requested')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gc_costs', to='projects.Project', verbose_name='project')),
            ],
            options={
                'ordering': ['recipient_org'],
            },
        ),
        migrations.AddField(
            model_name='fundingsource',
            name='funding_source_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='funding_sources', to='projects.FundingSourceType'),
        ),
        migrations.AddField(
            model_name='functionalgroup',
            name='theme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='functional_groups', to='projects.Theme'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='resource name')),
                ('file', models.FileField(blank=True, null=True, upload_to=projects.models.file_directory_path, verbose_name='file attachment')),
                ('external_url', models.URLField(blank=True, null=True, verbose_name='external URL')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='projects.Project')),
                ('status_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='projects.StatusReport')),
            ],
            options={
                'ordering': ['project', 'status_report', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Collaborator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('critical', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=True, verbose_name='Critical to project delivery')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborators', to='projects.Project', verbose_name='project')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CollaborativeAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partner_organization', models.CharField(blank=True, max_length=255, null=True, verbose_name='collaborating organization')),
                ('project_lead', models.CharField(blank=True, max_length=255, null=True, verbose_name='project lead')),
                ('agreement_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Title of the agreement')),
                ('new_or_existing', models.IntegerField(choices=[(1, 'New'), (2, 'Existing')], verbose_name='new or existing')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agreements', to='projects.Project', verbose_name='project')),
            ],
            options={
                'ordering': ['partner_organization'],
            },
        ),
        migrations.CreateModel(
            name='CapitalCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.IntegerField(choices=[(1, 'IM / IT - computers, hardware'), (2, 'Lab Equipment'), (3, 'Field Equipment'), (4, 'Other')], verbose_name='category')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('budget_requested', models.FloatField(default=0, verbose_name='budget requested')),
                ('funding_source', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='capital_costs', to='projects.FundingSource', verbose_name='funding source')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capital_costs', to='projects.Project', verbose_name='project')),
            ],
            options={
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead', models.BooleanField(choices=[(True, 'yes'), (False, 'no')], default=False, verbose_name='project lead')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Person name (leave blank if user is selected)')),
                ('student_program', models.IntegerField(blank=True, choices=[(1, 'FSWEP'), (2, 'Coop')], null=True, verbose_name='student program')),
                ('duration_weeks', models.FloatField(blank=True, default=0, null=True, verbose_name='duration in weeks')),
                ('overtime_hours', models.FloatField(blank=True, default=0, null=True, verbose_name='overtime in hours')),
                ('overtime_description', models.TextField(blank=True, null=True, verbose_name='overtime description')),
                ('cost', models.FloatField(blank=True, null=True, verbose_name='cost')),
                ('employee_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='projects.EmployeeType', verbose_name='employee type')),
                ('funding_source', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='staff_members', to='projects.FundingSource', verbose_name='funding source')),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='projects.Level', verbose_name='level')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_members', to='projects.Project', verbose_name='project')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='staff_instances', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['employee_type', 'level'],
                'unique_together': {('project', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.TextField(blank=True, null=True, verbose_name='executive summary')),
                ('pressures', models.TextField(blank=True, null=True, verbose_name='pressures')),
                ('functional_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='projects.FunctionalGroup')),
                ('funding_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='projects.FundingSource')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='shared_models.Section')),
            ],
            options={
                'unique_together': {('funding_source', 'functional_group'), ('section', 'functional_group')},
            },
        ),
        migrations.CreateModel(
            name='MilestoneUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='projects.Milestone')),
                ('status', models.ForeignKey(default=9, limit_choices_to={'used_for': 3}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='updates', to='projects.Status')),
                ('status_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='projects.StatusReport')),
            ],
            options={
                'ordering': ['-status_report', 'status'],
                'unique_together': {('milestone', 'status_report')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='fundingsource',
            unique_together={('funding_source_type', 'name')},
        ),
    ]
