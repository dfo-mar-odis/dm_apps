pool: dmapps

trigger:
  - none

# pipeline vars:
####################################
# AAD_APP_SECRET (secret)          #
# DB_PASSWORD_WEB (secret)         #
# DB_PASSWORD_PIPELINE (secret)    #
# SECRET_KEY (secret)              #
# SENDGRID_API_KEY (secret)        #
# GITHUB_API_KEY (secret)          #
# ENVIRONMENT_NAME                 #
####################################

steps:
  - script: |
      python3.8 -m pip install --upgrade pip setuptools wheel
      sudo apt-get install libmysqlclient-dev
      python3.8 -m pip install -r requirements.txt
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Install Dependencies'

  - script: |
      echo "STEP 1: Declare Variables"
      # These steps were parsed out in the past into different steps in the pipeline,
      # but bash variables created in one step do not get carried over to subsequent steps

      # these are used in the pipeline and will be written temporarily to the linux env
      export AZURE_MSI_CLIENT_ID=$( jq -r .AZURE_MSI_CLIENT_ID.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export AZURE_SUBSCRIPTION=$( jq -r .AZURE_SUBSCRIPTION.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export AZURE_RESOURCE_GROUP=$( jq -r .AZURE_RESOURCE_GROUP.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export AZURE_STORAGE_ACCOUNT_NAME=$( jq -r .AZURE_STORAGE_ACCOUNT_NAME.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export DB_HOST=$( jq -r .DB_HOST.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export DB_PORT=$( jq -r .DB_PORT ./azure_scripts/public_environmental_vars.json)
      export DB_MODE=$( jq -r .DB_MODE.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export DB_NAME=$( jq -r .DB_NAME.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export DB_USER=$( jq -r .DB_USER_PIPELINE.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export AZURE_ACR=$( jq -r .AZURE_ACR ./azure_scripts/public_environmental_vars.json)
      export DOCKER_REPOSITORY=$( jq -r .DOCKER_REPOSITORY ./azure_scripts/public_environmental_vars.json)
      export DOCKER_IMAGE_TAG=$( jq -r .DOCKER_IMAGE_TAG.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)
      export WEB_APP_NAME=$( jq -r .WEB_APP_NAME.$(ENVIRONMENT_NAME) ./azure_scripts/public_environmental_vars.json)

      # these have to be written into the web app confirguration and they are being pulled from the devops pipeline variables
      # this next var is needed by the pipeline too
      export DB_PASSWORD="$(DB_PASSWORD_PIPELINE)"

      AAD_APP_SECRET="$(AAD_APP_SECRET)"
      DB_PASSWORD_PIPELINE="$(DB_PASSWORD_PIPELINE)"
      DB_PASSWORD_WEB="$(DB_PASSWORD_WEB)"
      SECRET_KEY="$(SECRET_KEY)"
      SENDGRID_API_KEY="$(SENDGRID_API_KEY)"
      GITHUB_API_KEY="$(GITHUB_API_KEY)"
      ENVIRONMENT_NAME="$(ENVIRONMENT_NAME)"

      echo "STEP 2: Login to az-cli"
      az login --identity -u $AZURE_MSI_CLIENT_ID
      az account set --subscription="$AZURE_SUBSCRIPTION"

      echo "STEP 3: Run migrations"
      # run migrations and collect static files
      python3.8 manage.py migrate

      echo "STEP 4: Export static files to cloud storage blob"
      python3.8 manage.py collectstatic --no-input

      echo "STEP 5: Deploy ACR image ($AZURE_ACR/$DOCKER_IMAGE:DOCKER_tag) to web app ($WEB_APP_NAME)"

      # config

      az acr webhook update -n $AZURE_WEBHOOK_NAME -r "$AZURE_ACR" -g "$AZURE_RESOURCE_GROUP"

      az webapp deployment container config --enable-cd true -n "$WEB_APP_NAME" -g "$AZURE_RESOURCE_GROUP"
      az webapp restart -n "$WEB_APP_NAME" -g "$AZURE_RESOURCE_GROUP"
      az webapp deployment container config --enable-cd false -n "$WEB_APP_NAME" -g "$AZURE_RESOURCE_GROUP"

      az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$WEB_APP_NAME" --settings AAD_APP_SECRET=$AAD_APP_SECRET
      az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$WEB_APP_NAME" --settings DB_PASSWORD=$DB_PASSWORD_WEB
      az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$WEB_APP_NAME" --settings SECRET_KEY=$SECRET_KEY
      az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$WEB_APP_NAME" --settings SENDGRID_API_KEY=$SENDGRID_API_KEY
      az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$WEB_APP_NAME" --settings GITHUB_API_KEY=$GITHUB_API_KEY
      az webapp config appsettings set -g "$AZURE_RESOURCE_GROUP" -n "$WEB_APP_NAME" --settings ENVIRONMENT_NAME=$ENVIRONMENT_NAME


      echo "STEP 6: Unset environmental variables"
      # these are used in the pipeline and will be written temporarily to the linux env
      unset AZURE_MSI_CLIENT_ID
      unset AZURE_STORAGE_ACCOUNT_NAME
      unset AZURE_SUBSCRIPTION
      unset AZURE_RESOURCE_GROUP
      unset DB_HOST
      unset DB_MODE
      unset DB_NAME
      unset DB_PORT
      unset DB_USER_PIPELINE
      unset DOCKER_NAMESPACE
      unset DOCKER_REPOSITORY
      unset DOCKER_IMAGE_TAG
      unset WEB_APP_NAME
      unset DB_PASSWORD
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Migrations and Staticfiles'


#  - task: AzureRmWebAppDeployment@4
#    displayName: 'Deploy Docker Image'
#    inputs:
#      ConnectedServiceName: msi.dmapps-dev
#      appType: webAppContainer
#      WebAppName: $(WEB_APP_NAME.dev)
#      DockerNamespace: $(DockerNamespace.dev)
#      DockerRepository: $(DockerRepository.dev)
#      DockerImageTag: $(DockerImageTag.dev)
#      StartupCommand: init.sh
#      AppSettings: >-
#        -WEBSITES_PORT 8000
#        -AAD_APP_ID $(AAD_APP_ID.dev)
#        -AAD_APP_SECRET $(AAD_APP_SECRET)
#        -AAD_REDIRECT $(AAD_REDIRECT.dev)
#        -AZURE_STORAGE_ACCOUNT_NAME $(AZURE_STORAGE_ACCOUNT_NAME.dev)
#        -SECRET_KEY $(SECRET_KEY)
#        -ALLOWED_HOST_TO_ADD $(WEB_APP_NAME.dev).azurewebsites.net
#        -SITE_FROM_EMAIL "DoNotReply@Sci-Zone.dfo-mpo.gc.ca"
#        -SHOW_TICKETING_APP $(SHOW_TICKETING_APP.dev)
#        -DEPLOYMENT_STAGE $(DEPLOYMENT_STAGE.dev)
#        -DB_HOST $(DB_HOST.dev)
#        -DB_MODE $(DB_MODE.dev)
#        -DB_NAME $(DB_NAME.dev)
#        -DB_USER $(DB_USER_WEB.dev)
#        -DB_PASSWORD $(DB_PASSWORD_WEB)
#        -DB_PORT 3306
#        -DEBUG $(DEBUG.dev)
#        -AZURE_INSTRUMENTATION_KEY $(AZURE_INSTRUMENTATION_KEY.dev)
#        -USE_AZURE_APPLICATION_INSIGHT $(USE_AZURE_APPLICATION_INSIGHT.dev)
#        -SENDGRID_API_KEY $(SENDGRID_API_KEY)
#        -GITHUB_API_KEY $(GITHUB_API_KEY)
#        -DEVOPS_DEPLOYMENT_NUMBER $(Build.BuildNumber)
#        -AZURE_MSI_CLIENT_ID $(AZURE_MSI_CLIENT_ID.dev)


