# Generated by Django 2.2.2 on 2020-04-29 02:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import grais.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('shared_models', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Estuary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('province', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='estuaries', to='shared_models.Province')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GCSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('traps_set', models.DateTimeField(verbose_name='Traps set (yyyy-mm-dd hh:mm)')),
                ('traps_fished', models.DateTimeField(blank=True, null=True, verbose_name='Traps fished (yyyy-mm-dd hh:mm)')),
                ('eelgrass_assessed', models.NullBooleanField(verbose_name='was eelgrass assessed?')),
                ('eelgrass_percent_coverage', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='eelgrass coverage (%)')),
                ('sediment', models.IntegerField(blank=True, choices=[(1, 'Sand'), (2, 'Mud'), (3, 'Sand / Mud')], null=True)),
                ('season', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('last_modified', models.DateTimeField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-season', 'traps_set', 'site'],
            },
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collector', models.CharField(blank=True, max_length=56, null=True)),
                ('latitude_n', models.FloatField(blank=True, null=True)),
                ('longitude_w', models.FloatField(blank=True, null=True)),
                ('is_lost', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Was the line lost?')),
                ('notes', models.TextField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Probe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('probe_name', models.CharField(max_length=255)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.CharField(choices=[('first', 'first'), ('second', 'second'), ('full', 'full')], default='full', max_length=10, verbose_name='sample type')),
                ('date_deployed', models.DateTimeField()),
                ('date_retrieved', models.DateTimeField(blank=True, null=True)),
                ('days_deployed', models.IntegerField(blank=True, null=True)),
                ('old_substn_id', models.IntegerField(blank=True, null=True)),
                ('season', models.IntegerField(blank=True, null=True)),
                ('last_modified', models.DateTimeField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-season', 'date_deployed', 'station'],
            },
        ),
        migrations.CreateModel(
            name='Sampler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=25, null=True)),
                ('organization', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='common name (English)')),
                ('common_name_fra', models.CharField(blank=True, max_length=255, null=True, verbose_name='common name (French)')),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True)),
                ('abbrev', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='abbreviation')),
                ('epibiont_type', models.CharField(blank=True, choices=[(None, '-----'), ('ses', 'sessile'), ('mob', 'mobile')], max_length=10, null=True)),
                ('tsn', models.IntegerField(blank=True, null=True, verbose_name='Taxonomic Serial Number')),
                ('aphia_id', models.IntegerField(blank=True, null=True, verbose_name='AphiaID')),
                ('color_morph', models.BooleanField(verbose_name='Has color morph')),
                ('invasive', models.BooleanField(verbose_name='is invasive?')),
                ('green_crab_monitoring', models.BooleanField(default=False, verbose_name='targeted species in Green Crab Monitoring Program?')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['common_name'],
            },
        ),
        migrations.CreateModel(
            name='Surface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surface_type', models.CharField(choices=[('pe', 'Petri dish'), ('pl', 'Plate')], max_length=2)),
                ('label', models.CharField(max_length=255)),
                ('image', models.ImageField(blank=True, null=True, upload_to=grais.models.img_file_name)),
                ('is_lost', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Was the surface lost?')),
                ('notes', models.TextField(blank=True, null=True)),
                ('old_plateheader_id', models.IntegerField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surfaces', to='grais.Line')),
            ],
            options={
                'ordering': ['line', 'surface_type', 'label'],
            },
        ),
        migrations.CreateModel(
            name='WeatherConditions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Trap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trap_number', models.IntegerField()),
                ('trap_type', models.IntegerField(choices=[(1, 'Fukui'), (2, 'Minnow')], default=1)),
                ('bait_type', models.IntegerField(choices=[(1, 'Herring')], default=1)),
                ('depth_at_set_m', models.FloatField(blank=True, null=True, verbose_name='depth at set (m)')),
                ('latitude_n', models.FloatField(blank=True, null=True)),
                ('longitude_w', models.FloatField(blank=True, null=True)),
                ('gps_waypoint', models.IntegerField(blank=True, null=True, verbose_name='GPS waypoint')),
                ('notes', models.TextField(blank=True, null=True)),
                ('total_green_crab_wt_kg', models.FloatField(blank=True, null=True, verbose_name='Total weight of green crabs (kg)')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='traps', to='grais.GCSample')),
            ],
            options={
                'ordering': ['sample', 'trap_number'],
            },
        ),
        migrations.CreateModel(
            name='SurfaceSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent_coverage', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='surface_spp', to='grais.Species')),
                ('surface', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='surface_spp', to='grais.Surface')),
            ],
            options={
                'unique_together': {('species', 'surface')},
            },
        ),
        migrations.AddField(
            model_name='surface',
            name='species',
            field=models.ManyToManyField(through='grais.SurfaceSpecies', to='grais.Species'),
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('station_name', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude_n', models.FloatField(blank=True, null=True)),
                ('longitude_w', models.FloatField(blank=True, null=True)),
                ('depth', models.FloatField(blank=True, null=True)),
                ('site_desc', models.TextField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('province', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='stations', to='shared_models.Province')),
            ],
            options={
                'ordering': ['station_name'],
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=100)),
                ('latitude_n', models.FloatField(blank=True, null=True)),
                ('longitude_w', models.FloatField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('estuary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sites', to='grais.Estuary')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='SampleSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_date', models.DateTimeField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sample_spp', to='grais.Sample')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sample_spp', to='grais.Species')),
            ],
            options={
                'unique_together': {('species', 'sample')},
            },
        ),
        migrations.CreateModel(
            name='SampleNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField()),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='grais.Sample')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='sample',
            name='samplers',
            field=models.ManyToManyField(to='grais.Sampler'),
        ),
        migrations.AddField(
            model_name='sample',
            name='species',
            field=models.ManyToManyField(through='grais.SampleSpecies', to='grais.Species'),
        ),
        migrations.AddField(
            model_name='sample',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='samples', to='grais.Station'),
        ),
        migrations.CreateModel(
            name='ProbeMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_date', models.DateTimeField(blank=True, null=True, verbose_name='Date / Time (yyyy-mm-dd hh:mm)')),
                ('timezone', models.CharField(blank=True, choices=[('AST', 'AST'), ('ADT', 'ADT'), ('UTC', 'UTC')], max_length=5, null=True)),
                ('probe_depth', models.FloatField(blank=True, null=True, verbose_name='Probe depth (m)')),
                ('cloud_cover', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='% cloud cover')),
                ('temp_c', models.FloatField(blank=True, null=True, verbose_name='Temp (°C)')),
                ('sal_ppt', models.FloatField(blank=True, null=True, verbose_name='Salinity (ppt)')),
                ('o2_percent', models.FloatField(blank=True, null=True, verbose_name='Dissolved oxygen (%)')),
                ('o2_mgl', models.FloatField(blank=True, null=True, verbose_name='Dissolved oxygen (mg/l)')),
                ('sp_cond_ms', models.FloatField(blank=True, null=True, verbose_name='Specific conductance (mS)')),
                ('spc_ms', models.FloatField(blank=True, null=True, verbose_name='Conductivity (mS)')),
                ('ph', models.FloatField(blank=True, null=True, verbose_name='pH')),
                ('turbidity', models.FloatField(blank=True, null=True)),
                ('weather_notes', models.CharField(blank=True, max_length=1000, null=True)),
                ('probe', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='grais.Probe', verbose_name='Probe name')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='probe_data', to='grais.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='LineSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_date', models.DateTimeField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_spp', to='grais.Line')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='line_spp', to='grais.Species')),
            ],
            options={
                'unique_together': {('species', 'line')},
            },
        ),
        migrations.AddField(
            model_name='line',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='grais.Sample'),
        ),
        migrations.AddField(
            model_name='line',
            name='species',
            field=models.ManyToManyField(through='grais.LineSpecies', to='grais.Species'),
        ),
        migrations.CreateModel(
            name='IncidentalReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('language_of_report', models.IntegerField(choices=[(1, 'English'), (2, 'French')])),
                ('requestor_name', models.CharField(max_length=150)),
                ('requestor_type', models.IntegerField(blank=True, choices=[(1, 'public'), (2, 'academia'), (3, 'private sector'), (4, 'provincial government'), (5, 'federal government')], null=True)),
                ('report_source', models.IntegerField(choices=[(1, 'Gulf AIS Hotline'), (2, 'Gulf Invaders E-mail'), (3, 'Personal E-mail')])),
                ('species_confirmation', models.NullBooleanField()),
                ('gulf_ais_confirmed', models.NullBooleanField()),
                ('seeking_general_info_ais', models.NullBooleanField()),
                ('seeking_general_info_non_ais', models.NullBooleanField()),
                ('management_related', models.NullBooleanField()),
                ('dfo_it_related', models.NullBooleanField()),
                ('incorrect_region', models.NullBooleanField()),
                ('call_answered_by', models.CharField(blank=True, max_length=150, null=True)),
                ('call_returned_by', models.CharField(blank=True, max_length=150, null=True)),
                ('location_description', models.CharField(blank=True, max_length=500, null=True)),
                ('latitude_n', models.FloatField(blank=True, null=True)),
                ('longitude_w', models.FloatField(blank=True, null=True)),
                ('specimens_retained', models.NullBooleanField()),
                ('sighting_description', models.TextField(blank=True, null=True)),
                ('identified_by', models.CharField(blank=True, max_length=150, null=True)),
                ('date_of_occurrence', models.DateTimeField()),
                ('observation_type', models.IntegerField(choices=[(1, 'Single observation'), (2, 'Ongoing presence')])),
                ('phone1', models.CharField(blank=True, max_length=50, null=True, verbose_name='phone 1')),
                ('phone2', models.CharField(blank=True, max_length=50, null=True, verbose_name='phone 2')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('season', models.IntegerField()),
                ('date_last_modified', models.DateTimeField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('species', models.ManyToManyField(to='grais.Species', verbose_name='Concerning which species')),
            ],
            options={
                'ordering': ['-report_date'],
            },
        ),
        migrations.AddField(
            model_name='gcsample',
            name='samplers',
            field=models.ManyToManyField(to='grais.Sampler'),
        ),
        migrations.AddField(
            model_name='gcsample',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='samples', to='grais.Site'),
        ),
        migrations.AddField(
            model_name='gcsample',
            name='vegetation_species',
            field=models.ManyToManyField(blank=True, limit_choices_to=models.Q(id__in=[5, 6, 46, 131, 132, 133]), to='grais.Species'),
        ),
        migrations.CreateModel(
            name='GCProbeMeasurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_date', models.DateTimeField(blank=True, null=True, verbose_name='date / Time (yyyy-mm-dd hh:mm:ss)')),
                ('timezone', models.CharField(blank=True, choices=[('AST', 'AST'), ('ADT', 'ADT'), ('UTC', 'UTC')], default='ADT', max_length=5, null=True)),
                ('temp_c', models.FloatField(blank=True, null=True, verbose_name='temperature (°C)')),
                ('sal', models.FloatField(blank=True, null=True, verbose_name='salinity')),
                ('o2_percent', models.FloatField(blank=True, null=True, verbose_name='Dissolved oxygen (%)')),
                ('o2_mgl', models.FloatField(blank=True, null=True, verbose_name='Dissolved oxygen (mg/L)')),
                ('sp_cond_ms', models.FloatField(blank=True, null=True, verbose_name='Specific conductance (mS)')),
                ('cond_ms', models.FloatField(blank=True, null=True, verbose_name='Conductivity (mS)')),
                ('tide_state', models.CharField(blank=True, choices=[('h', 'High'), ('m', 'Mid'), ('l', 'Low')], max_length=5, null=True)),
                ('tide_direction', models.CharField(blank=True, choices=[('in', 'Incoming'), ('out', 'Outgoing')], max_length=5, null=True)),
                ('cloud_cover', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='cloud cover (%)')),
                ('probe', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='grais.Probe')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='probe_data', to='grais.GCSample')),
                ('weather_conditions', models.ManyToManyField(to='grais.WeatherConditions', verbose_name='weather conditions (ctrl+click to select multiple)')),
            ],
        ),
        migrations.CreateModel(
            name='FollowUp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField()),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('incidental_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followups', to='grais.IncidentalReport')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Catch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('width', models.FloatField(blank=True, null=True)),
                ('sex', models.IntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female'), (9, 'Unknown')], null=True)),
                ('carapace_color', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('abdomen_color', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('egg_color', models.CharField(blank=True, max_length=25, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='grais.Species')),
                ('trap', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='catch_spp', to='grais.Trap')),
            ],
            options={
                'ordering': ['trap', 'species', 'id'],
            },
        ),
    ]
