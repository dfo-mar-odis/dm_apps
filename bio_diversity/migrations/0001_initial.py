# Generated by Django 3.1.6 on 2021-03-22 12:23

import bio_diversity.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AniDetailXref',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('final_contx_flag', models.BooleanField(blank=True, default=None, null=True, verbose_name='Final Container in movement')),
            ],
        ),
        migrations.CreateModel(
            name='AniDetSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AnimalDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Maximum Value')),
                ('ani_subj_flag', models.BooleanField(verbose_name='Subjective?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommentKeywords',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['keyword'],
            },
        ),
        migrations.CreateModel(
            name='ContainerDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(decimal_places=5, max_digits=11, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(decimal_places=5, max_digits=11, verbose_name='Maximum Value')),
                ('cont_subj_flag', models.BooleanField(verbose_name='Subjective detail?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContainerXRef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
        ),
        migrations.CreateModel(
            name='ContDetSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
        ),
        migrations.CreateModel(
            name='Count',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('cnt', models.DecimalField(decimal_places=0, max_digits=6, verbose_name='Count')),
                ('est', models.BooleanField(verbose_name='Estimated?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='CountCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='Cup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
            ],
            options={
                'ordering': ['draw_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CupDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='DataLoader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('data_csv', models.FileField(blank=True, null=True, upload_to='', verbose_name='Datafile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Drawer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
            ],
            options={
                'ordering': ['heat_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EnvCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(decimal_places=5, max_digits=11, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(decimal_places=5, max_digits=11, verbose_name='Maximum Value')),
                ('env_subj_flag', models.BooleanField(verbose_name='Objective observation?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnvCondFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('env_pdf', models.FileField(blank=True, null=True, upload_to=bio_diversity.models.envcf_directory_path, verbose_name='Environment Condition File')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnvCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_datetime', models.DateTimeField(verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('env_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('env_avg', models.BooleanField(default=False, verbose_name='Is value an average?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='EnvSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnvTreatCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('rec_dose', models.CharField(blank=True, max_length=400, null=True, verbose_name='Recommended Dosage')),
                ('manufacturer', models.CharField(max_length=50, verbose_name='Treatment Manufacturer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnvTreatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('lot_num', models.CharField(blank=True, max_length=30, null=True, verbose_name='Lot Number')),
                ('amt', models.DecimalField(decimal_places=3, max_digits=7, verbose_name='Dose')),
                ('concentration', models.DecimalField(blank=True, decimal_places=7, max_digits=8, null=True, verbose_name='Concentration')),
                ('duration', models.DecimalField(decimal_places=0, max_digits=5, verbose_name='Duration (minutes)')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_datetime', models.DateTimeField(verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EventCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EventFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('evntf_xls', models.FileField(blank=True, null=True, upload_to=bio_diversity.models.evntf_directory_path, verbose_name='Event File')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='EventFileCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FacilityCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fecundity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('alpha', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='A')),
                ('beta', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='B')),
            ],
        ),
        migrations.CreateModel(
            name='FeedCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('manufacturer', models.CharField(max_length=50, verbose_name='Maufacturer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Feeding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('lot_num', models.CharField(blank=True, max_length=40, null=True, verbose_name='Lot Number')),
                ('amt', models.DecimalField(decimal_places=3, max_digits=7, verbose_name='Amount of Feed')),
                ('freq', models.CharField(blank=True, max_length=40, null=True, verbose_name='Description of frequency')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FeedMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('grp_year', models.IntegerField(default=2000, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)], verbose_name='Collection year')),
                ('grp_valid', models.BooleanField(default='True', verbose_name='Group still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('det_val', models.CharField(blank=True, max_length=20, null=True, verbose_name='Value')),
                ('grpd_valid', models.BooleanField(default='True', verbose_name='Detail still valid?')),
                ('detail_date', models.DateField(verbose_name='Date detail was recorded')),
            ],
        ),
        migrations.CreateModel(
            name='HeathUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('manufacturer', models.CharField(max_length=35, verbose_name='Maufacturer')),
                ('inservice_date', models.DateField(verbose_name='Date unit was put into service')),
                ('serial_number', models.CharField(max_length=50, verbose_name='Serial Number')),
            ],
            options={
                'ordering': ['facic_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='HeathUnitDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='HelpText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('eng_text', models.TextField(verbose_name='English text')),
                ('fra_text', models.TextField(blank=True, null=True, verbose_name='French text')),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['field_name'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('img_png', models.FileField(blank=True, null=True, upload_to=bio_diversity.models.img_directory_path, verbose_name='Image File')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='ImageCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('indv_year', models.IntegerField(default=2000, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)], verbose_name='Collection year')),
                ('ufid', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='ABL Fish UFID')),
                ('pit_tag', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='PIT tag ID')),
                ('indv_valid', models.BooleanField(default='True', verbose_name='Entry still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndividualDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('det_val', models.CharField(blank=True, max_length=20, null=True, verbose_name='Value')),
                ('indvd_valid', models.BooleanField(default='True', verbose_name='Detail still valid?')),
                ('detail_date', models.DateField(verbose_name='Date detail was recorded')),
            ],
        ),
        migrations.CreateModel(
            name='IndTreatCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('rec_dose', models.CharField(max_length=400, verbose_name='Recommended Dosage')),
                ('manufacturer', models.CharField(max_length=50, verbose_name='Treatment Manufacturer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndTreatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_datetime', models.DateTimeField(verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('lot_num', models.CharField(max_length=30, verbose_name='Lot Number')),
                ('dose', models.DecimalField(decimal_places=3, max_digits=7, verbose_name='Dose')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('serial_number', models.CharField(blank=True, max_length=250, null=True, unique=True, verbose_name='Serial Number')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('det_value', models.DecimalField(decimal_places=5, max_digits=11, verbose_name='Value')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('loc_lat', models.DecimalField(blank=True, decimal_places=5, max_digits=7, null=True, verbose_name='Lattitude')),
                ('loc_lon', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True, verbose_name='Longitude')),
                ('loc_date', models.DateTimeField(verbose_name='Start date')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
            ],
        ),
        migrations.CreateModel(
            name='LocCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pairing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('cross', models.IntegerField(verbose_name='Cross')),
            ],
        ),
        migrations.CreateModel(
            name='PersonnelCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('perc_last_name', models.CharField(max_length=32, verbose_name='Last Name')),
                ('perc_first_name', models.CharField(max_length=32, verbose_name='First Name')),
                ('initials', models.CharField(blank=True, max_length=4, null=True, verbose_name='Initials')),
                ('perc_valid', models.BooleanField(default='False', verbose_name='Record still valid?')),
            ],
            options={
                'ordering': ['perc_last_name', 'perc_first_name'],
            },
        ),
        migrations.CreateModel(
            name='PriorityCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProgAuthority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('proga_last_name', models.CharField(max_length=32, verbose_name='Last Name')),
                ('proga_first_name', models.CharField(max_length=32, verbose_name='First Name')),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('prog_name', models.CharField(max_length=30, unique=True, verbose_name='Program Name')),
                ('prog_desc', models.CharField(max_length=4000, verbose_name='Program Description')),
                ('orga_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.organization', verbose_name='Organization')),
                ('proga_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.progauthority', verbose_name='Program Authority')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtoCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('valid', models.BooleanField(default='True', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('name', models.CharField(max_length=25, verbose_name='Protocol Name')),
                ('prot_desc', models.CharField(max_length=4000, verbose_name='Protocol Description')),
                ('evntc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.eventcode', verbose_name='Event Code')),
                ('facic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility')),
                ('prog_id', models.ForeignKey(limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, related_name='protocols', to='bio_diversity.program', verbose_name='Program')),
                ('protc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.protocode', verbose_name='Protocol Code')),
            ],
        ),
        migrations.CreateModel(
            name='QualCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiverCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoleCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('samp_num', models.IntegerField(verbose_name='Sample Fish Number')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('loc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.location', verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='SampleCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpawnDetCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Minimum Value')),
                ('max_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Maximum Value')),
                ('spwn_subj_flag', models.BooleanField(verbose_name='Subjective?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpeciesCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=10, verbose_name='Species Name')),
                ('species', models.CharField(max_length=100, verbose_name='Species')),
                ('com_name', models.CharField(blank=True, max_length=35, null=True, verbose_name='Species Common Name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StockCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('facic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility')),
            ],
            options={
                'ordering': ['facic_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Tray',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
            ],
            options={
                'ordering': ['trof_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Trough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('name', models.CharField(max_length=255, verbose_name='name (en)')),
                ('facic_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility')),
            ],
            options={
                'ordering': ['facic_id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UnitCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TroughDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('trof_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.trough', verbose_name='Trough')),
            ],
        ),
        migrations.CreateModel(
            name='Tributary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('rive_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rivercode', verbose_name='River')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrayDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('tray_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tray', verbose_name='Tray')),
            ],
        ),
        migrations.AddField(
            model_name='tray',
            name='trof_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trays', to='bio_diversity.trough', verbose_name='Trough'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('perc_id', models.ForeignKey(limit_choices_to={'perc_valid': True}, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.personnelcode', verbose_name='Team Member')),
                ('role_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rolecode', verbose_name='Role Code')),
            ],
        ),
        migrations.CreateModel(
            name='TankDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_value', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('start_date', models.DateField(verbose_name='Date detail was recorded')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Last Date Detail is valid')),
                ('det_valid', models.BooleanField(default='False', verbose_name='Detail still valid?')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('cdsc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code')),
                ('contdc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code')),
                ('tank_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tank', verbose_name='Tank')),
            ],
        ),
        migrations.CreateModel(
            name='SubRiverCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('rive_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rivercode', verbose_name='River')),
                ('trib_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tributary', verbose_name='Tributary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpawnDetSubjCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('spwndc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.spawndetcode', verbose_name='Spawn Detail Code')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='spawndetcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.CreateModel(
            name='SpawnDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('pair_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spawning_details', to='bio_diversity.pairing', verbose_name='Pairing')),
                ('qual_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
                ('spwndc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.spawndetcode', verbose_name='Spawning Detail Code')),
                ('spwnsc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.spawndetsubjcode', verbose_name='Spawning Detail Subjective Code')),
            ],
        ),
        migrations.CreateModel(
            name='Sire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('choice', models.IntegerField(verbose_name='Choice')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('indv_id', models.ForeignKey(limit_choices_to={'indv_valid': True, 'pit_tag__isnull': False}, on_delete=django.db.models.deletion.CASCADE, related_name='sires', to='bio_diversity.individual', verbose_name='Sire')),
                ('pair_id', models.ForeignKey(limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, related_name='sires', to='bio_diversity.pairing', verbose_name='Pairing')),
                ('prio_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.prioritycode', verbose_name='Priority')),
            ],
        ),
        migrations.CreateModel(
            name='SampleDet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('det_val', models.DecimalField(blank=True, decimal_places=5, max_digits=11, null=True, verbose_name='Value')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('adsc_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code')),
                ('anidc_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code')),
                ('qual_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality')),
                ('samp_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.sample', verbose_name='Sample')),
            ],
        ),
        migrations.AddField(
            model_name='sample',
            name='sampc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.samplecode', verbose_name='Sample Code'),
        ),
        migrations.AddField(
            model_name='sample',
            name='spec_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.CreateModel(
            name='ReleaseSiteCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description (en)')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description (fr)')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('min_lat', models.DecimalField(blank=True, decimal_places=5, max_digits=7, null=True, verbose_name='Min Lattitude')),
                ('max_lat', models.DecimalField(blank=True, decimal_places=5, max_digits=7, null=True, verbose_name='Max Lattitude')),
                ('min_lon', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True, verbose_name='Min Longitude')),
                ('max_lon', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True, verbose_name='Max Longitude')),
                ('rive_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rivercode', verbose_name='River')),
                ('subr_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.subrivercode', verbose_name='SubRiver Code')),
                ('trib_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tributary', verbose_name='Tributary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Protofile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=32, verbose_name='Created By')),
                ('created_date', models.DateField(verbose_name='Created Date')),
                ('protf_pdf', models.FileField(blank=True, null=True, upload_to=bio_diversity.models.protf_directory_path, verbose_name='Protocol File')),
                ('comments', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Comments')),
                ('prot_id', models.ForeignKey(limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, related_name='protf_id', to='bio_diversity.protocol', verbose_name='Protocol')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='progauthority',
            constraint=models.UniqueConstraint(fields=('proga_first_name', 'proga_last_name'), name='Program_Authority_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='personnelcode',
            constraint=models.UniqueConstraint(fields=('perc_first_name', 'perc_last_name'), name='Personnel_Code_Uniqueness'),
        ),
        migrations.AddField(
            model_name='pairing',
            name='indv_id',
            field=models.ForeignKey(limit_choices_to={'indv_valid': True, 'pit_tag__isnull': False}, on_delete=django.db.models.deletion.CASCADE, related_name='pairings', to='bio_diversity.individual', verbose_name='Dam'),
        ),
        migrations.AddField(
            model_name='pairing',
            name='pair_prio_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pair_priorities', to='bio_diversity.prioritycode', verbose_name='Priority of Pair'),
        ),
        migrations.AddField(
            model_name='pairing',
            name='prio_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='female_priorities', to='bio_diversity.prioritycode', verbose_name='Priority of Female'),
        ),
        migrations.AddField(
            model_name='location',
            name='evnt_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='bio_diversity.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='location',
            name='locc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.loccode', verbose_name='Location Code'),
        ),
        migrations.AddField(
            model_name='location',
            name='relc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.releasesitecode', verbose_name='Site Code'),
        ),
        migrations.AddField(
            model_name='location',
            name='rive_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.rivercode', verbose_name='River'),
        ),
        migrations.AddField(
            model_name='location',
            name='subr_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.subrivercode', verbose_name='SubRiver Code'),
        ),
        migrations.AddField(
            model_name='location',
            name='trib_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tributary', verbose_name='Tributary'),
        ),
        migrations.AddField(
            model_name='instrumentdet',
            name='inst_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instrument', verbose_name='Instrument'),
        ),
        migrations.AddField(
            model_name='instrumentdet',
            name='instdc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instdetcode', verbose_name='Instrument Detail Code'),
        ),
        migrations.AddField(
            model_name='instrument',
            name='instc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instrumentcode', verbose_name='Instrument Code'),
        ),
        migrations.AddField(
            model_name='indtreatment',
            name='indvtc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.indtreatcode', verbose_name='Individual Treatment Code'),
        ),
        migrations.AddField(
            model_name='indtreatment',
            name='unit_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='individualdet',
            name='adsc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code'),
        ),
        migrations.AddField(
            model_name='individualdet',
            name='anidc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code'),
        ),
        migrations.AddField(
            model_name='individualdet',
            name='anix_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='individual_details', to='bio_diversity.anidetailxref', verbose_name='Animal Detail Cross Reference'),
        ),
        migrations.AddField(
            model_name='individualdet',
            name='qual_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality'),
        ),
        migrations.AddField(
            model_name='individual',
            name='coll_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.collection', verbose_name='Collection'),
        ),
        migrations.AddField(
            model_name='individual',
            name='grp_id',
            field=models.ForeignKey(blank=True, limit_choices_to={'grp_valid': True}, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.group', verbose_name='From Parent Group'),
        ),
        migrations.AddField(
            model_name='individual',
            name='spec_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.AddField(
            model_name='individual',
            name='stok_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.stockcode', verbose_name='Stock Code'),
        ),
        migrations.AddField(
            model_name='image',
            name='cntd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.countdet', verbose_name='Count Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='cupd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.cupdet', verbose_name='Cup Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='draw_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.drawer', verbose_name='Drawer'),
        ),
        migrations.AddField(
            model_name='image',
            name='grpd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.groupdet', verbose_name='Group Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='heatd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.heathunitdet', verbose_name='Heath Unit Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='imgc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.imagecode', verbose_name='Image Code'),
        ),
        migrations.AddField(
            model_name='image',
            name='indvd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.individualdet', verbose_name='Individual Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='loc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.location', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='image',
            name='sampd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.sampledet', verbose_name='Sample Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='spwnd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.spawndet', verbose_name='Spawn Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='tankd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.tankdet', verbose_name='Tank Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='trayd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.traydet', verbose_name='Tray Detail'),
        ),
        migrations.AddField(
            model_name='image',
            name='trofd_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='bio_diversity.troughdet', verbose_name='Trough Detail'),
        ),
        migrations.AddField(
            model_name='heathunitdet',
            name='cdsc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code'),
        ),
        migrations.AddField(
            model_name='heathunitdet',
            name='contdc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code'),
        ),
        migrations.AddField(
            model_name='heathunitdet',
            name='heat_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.heathunit', verbose_name='Heath Unit'),
        ),
        migrations.AddField(
            model_name='heathunit',
            name='facic_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility'),
        ),
        migrations.AddField(
            model_name='groupdet',
            name='adsc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code'),
        ),
        migrations.AddField(
            model_name='groupdet',
            name='anidc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code'),
        ),
        migrations.AddField(
            model_name='groupdet',
            name='anix_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_details', to='bio_diversity.anidetailxref', verbose_name='Animal Detail Cross Reference'),
        ),
        migrations.AddField(
            model_name='groupdet',
            name='frm_grp_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.group', verbose_name='From Parent Group'),
        ),
        migrations.AddField(
            model_name='groupdet',
            name='qual_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality'),
        ),
        migrations.AddField(
            model_name='group',
            name='coll_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.collection', verbose_name='Collection'),
        ),
        migrations.AddField(
            model_name='group',
            name='spec_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.AddField(
            model_name='group',
            name='stok_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.stockcode', verbose_name='Stock Code'),
        ),
        migrations.AddField(
            model_name='feeding',
            name='contx_id',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerxref', verbose_name='Container Cross Reference'),
        ),
        migrations.AddField(
            model_name='feeding',
            name='feedc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.feedcode', verbose_name='Feeding Code'),
        ),
        migrations.AddField(
            model_name='feeding',
            name='feedm_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.feedmethod', verbose_name='Feeding Method'),
        ),
        migrations.AddField(
            model_name='feeding',
            name='unit_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='fecundity',
            name='coll_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.collection', verbose_name='Collection'),
        ),
        migrations.AddField(
            model_name='fecundity',
            name='stok_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.stockcode', verbose_name='Stock Code'),
        ),
        migrations.AddField(
            model_name='eventfile',
            name='evnt_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_files', to='bio_diversity.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='eventfile',
            name='evntfc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_files', to='bio_diversity.eventfilecode', verbose_name='Event File Code'),
        ),
        migrations.AddField(
            model_name='eventfile',
            name='stok_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_files', to='bio_diversity.stockcode', verbose_name='Stock Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='evntc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.eventcode', verbose_name='Event Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='facic_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Facility Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='perc_id',
            field=models.ForeignKey(limit_choices_to={'perc_valid': True}, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.personnelcode', verbose_name='Personnel Code'),
        ),
        migrations.AddField(
            model_name='event',
            name='prog_id',
            field=models.ForeignKey(limit_choices_to={'valid': True}, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.program', verbose_name='Program'),
        ),
        migrations.AddField(
            model_name='event',
            name='team_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.team', verbose_name='Team'),
        ),
        migrations.AddField(
            model_name='envtreatment',
            name='contx_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='env_treatment', to='bio_diversity.containerxref', verbose_name='Container Cross Reference'),
        ),
        migrations.AddField(
            model_name='envtreatment',
            name='envtc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envtreatcode', verbose_name='Environment Treatment Code'),
        ),
        migrations.AddField(
            model_name='envtreatment',
            name='unit_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='envsubjcode',
            name='envc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envcode', verbose_name='Environment Code'),
        ),
        migrations.AddField(
            model_name='envcondition',
            name='contx_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='env_condition', to='bio_diversity.containerxref', verbose_name='Container Cross Reference'),
        ),
        migrations.AddField(
            model_name='envcondition',
            name='envc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envcode', verbose_name='Environment variable'),
        ),
        migrations.AddField(
            model_name='envcondition',
            name='envsc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.envsubjcode', verbose_name='Environment Subjective Code'),
        ),
        migrations.AddField(
            model_name='envcondition',
            name='inst_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.instrument', verbose_name='Instrument'),
        ),
        migrations.AddField(
            model_name='envcondition',
            name='loc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='env_condition', to='bio_diversity.location', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='envcondition',
            name='qual_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality of observation'),
        ),
        migrations.AddField(
            model_name='envcondfile',
            name='env_id',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='envcf_id', to='bio_diversity.envcondition', verbose_name='Environment Condition'),
        ),
        migrations.AddField(
            model_name='envcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='drawer',
            name='heat_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='draws', to='bio_diversity.heathunit', verbose_name='Heath Unit'),
        ),
        migrations.AddField(
            model_name='dataloader',
            name='evnt_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='dataloader',
            name='evntc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.eventcode', verbose_name='Data Format'),
        ),
        migrations.AddField(
            model_name='dataloader',
            name='facic_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.facilitycode', verbose_name='Data Format'),
        ),
        migrations.AddField(
            model_name='dataloader',
            name='tank_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.tank', verbose_name='Destination Tank'),
        ),
        migrations.AddField(
            model_name='cupdet',
            name='cdsc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.contdetsubjcode', verbose_name='Container Detail Subjective Code'),
        ),
        migrations.AddField(
            model_name='cupdet',
            name='contdc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container Detail Code'),
        ),
        migrations.AddField(
            model_name='cupdet',
            name='cup_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.cup', verbose_name='Cup'),
        ),
        migrations.AddField(
            model_name='cup',
            name='draw_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cups', to='bio_diversity.drawer', verbose_name='Drawer'),
        ),
        migrations.AddField(
            model_name='countdet',
            name='adsc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code'),
        ),
        migrations.AddField(
            model_name='countdet',
            name='anidc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Animal Detail Code'),
        ),
        migrations.AddField(
            model_name='countdet',
            name='cnt_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='count_details', to='bio_diversity.count', verbose_name='Count'),
        ),
        migrations.AddField(
            model_name='countdet',
            name='qual_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.qualcode', verbose_name='Quality'),
        ),
        migrations.AddField(
            model_name='count',
            name='cntc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.countcode', verbose_name='Count Code'),
        ),
        migrations.AddField(
            model_name='count',
            name='contx_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counts', to='bio_diversity.containerxref', verbose_name='Container Cross Reference'),
        ),
        migrations.AddField(
            model_name='count',
            name='loc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counts', to='bio_diversity.location', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='count',
            name='spec_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.speciescode', verbose_name='Species'),
        ),
        migrations.AddField(
            model_name='contdetsubjcode',
            name='contdc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.containerdetcode', verbose_name='Container detail code'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='cup_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.cup', verbose_name='Cup'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='draw_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.drawer', verbose_name='Drawer'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='evnt_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='containers', to='bio_diversity.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='heat_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.heathunit', verbose_name='Heath Unit'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='tank_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.tank', verbose_name='Tank'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='tray_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.tray', verbose_name='Tray'),
        ),
        migrations.AddField(
            model_name='containerxref',
            name='trof_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contxs', to='bio_diversity.trough', verbose_name='Trough'),
        ),
        migrations.AddField(
            model_name='containerdetcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='commentkeywords',
            name='adsc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.anidetsubjcode', verbose_name='Animal Detail Subjective Code'),
        ),
        migrations.AddField(
            model_name='animaldetcode',
            name='unit_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.unitcode', verbose_name='Units'),
        ),
        migrations.AddField(
            model_name='anidetsubjcode',
            name='anidc_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bio_diversity.animaldetcode', verbose_name='Type of measurement'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='contx_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.containerxref', verbose_name='Container Cross Reference'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='evnt_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.event', verbose_name='Event'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='grp_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.group', verbose_name='Group'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='indv_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.individual', verbose_name='Individual'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='indvt_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.indtreatment', verbose_name='Individual Treatment'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='loc_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.location', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='anidetailxref',
            name='pair_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='animal_details', to='bio_diversity.pairing', verbose_name='Pairing'),
        ),
        migrations.AddConstraint(
            model_name='troughdet',
            constraint=models.UniqueConstraint(fields=('trof_id', 'contdc_id', 'start_date'), name='Trough_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='trough',
            constraint=models.UniqueConstraint(fields=('name', 'facic_id'), name='trof_uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='traydet',
            constraint=models.UniqueConstraint(fields=('tray_id', 'contdc_id', 'start_date'), name='Tray_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='tray',
            constraint=models.UniqueConstraint(fields=('name', 'trof_id', 'start_date'), name='tray_uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='team',
            constraint=models.UniqueConstraint(fields=('perc_id', 'role_id'), name='Team_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='tankdet',
            constraint=models.UniqueConstraint(fields=('tank_id', 'contdc_id', 'start_date'), name='Tank_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='tank',
            constraint=models.UniqueConstraint(fields=('name', 'facic_id'), name='tank_uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='spawndet',
            constraint=models.UniqueConstraint(fields=('pair_id', 'spwndc_id', 'spwnsc_id'), name='Spawning_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='sire',
            constraint=models.UniqueConstraint(fields=('indv_id', 'pair_id'), name='Sire_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='sampledet',
            constraint=models.UniqueConstraint(fields=('samp_id', 'anidc_id', 'adsc_id'), name='Sample_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.UniqueConstraint(fields=('loc_id', 'samp_num', 'spec_id', 'sampc_id'), name='Sample_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='protocol',
            constraint=models.UniqueConstraint(fields=('name', 'prog_id', 'protc_id', 'start_date'), name='Protocol_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='pairing',
            constraint=models.UniqueConstraint(fields=('indv_id', 'start_date'), name='Pairing_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.UniqueConstraint(fields=('evnt_id', 'locc_id', 'rive_id', 'trib_id', 'subr_id', 'relc_id', 'loc_lat', 'loc_lon', 'loc_date'), name='Location_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='instrumentdet',
            constraint=models.UniqueConstraint(fields=('inst_id', 'instdc_id', 'start_date'), name='Instrument_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='individualdet',
            constraint=models.UniqueConstraint(fields=('anix_id', 'anidc_id', 'adsc_id'), name='Individual_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='image',
            constraint=models.UniqueConstraint(fields=('imgc_id', 'loc_id', 'cntd_id', 'grpd_id', 'sampd_id', 'indvd_id', 'spwnd_id', 'tankd_id', 'heatd_id', 'draw_id', 'trofd_id', 'trayd_id', 'cupd_id'), name='Image_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='heathunitdet',
            constraint=models.UniqueConstraint(fields=('heat_id', 'contdc_id', 'cdsc_id', 'start_date'), name='Heath_Unit_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='heathunit',
            constraint=models.UniqueConstraint(fields=('name', 'facic_id'), name='heat_uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='groupdet',
            constraint=models.UniqueConstraint(fields=('anix_id', 'anidc_id', 'adsc_id', 'frm_grp_id'), name='Group_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='fecundity',
            constraint=models.UniqueConstraint(fields=('stok_id', 'coll_id', 'start_date'), name='Fecundity_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='eventfile',
            constraint=models.UniqueConstraint(fields=('evnt_id', 'stok_id'), name='Event_File_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.UniqueConstraint(fields=('facic_id', 'evntc_id', 'prog_id', 'start_datetime', 'end_datetime'), name='Event_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='envtreatment',
            constraint=models.UniqueConstraint(fields=('contx_id', 'envtc_id'), name='Environment_Treatment_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='envcondition',
            constraint=models.UniqueConstraint(fields=('contx_id', 'loc_id', 'inst_id', 'envc_id', 'envsc_id', 'start_datetime'), name='Environment_Condition_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='drawer',
            constraint=models.UniqueConstraint(fields=('name', 'heat_id'), name='draw_uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='cupdet',
            constraint=models.UniqueConstraint(fields=('cup_id', 'contdc_id', 'cdsc_id', 'start_date'), name='Cup_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='cup',
            constraint=models.UniqueConstraint(fields=('name', 'draw_id', 'start_date'), name='cup_uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='countdet',
            constraint=models.UniqueConstraint(fields=('cnt_id', 'anidc_id', 'adsc_id'), name='Count_Detail_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='count',
            constraint=models.UniqueConstraint(fields=('loc_id', 'contx_id', 'cntc_id', 'spec_id'), name='Count_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='contdetsubjcode',
            constraint=models.UniqueConstraint(fields=('name', 'contdc_id'), name='CDSC_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='containerxref',
            constraint=models.UniqueConstraint(fields=('evnt_id', 'tank_id', 'trof_id', 'tray_id', 'heat_id', 'draw_id', 'cup_id'), name='Container_Cross_Reference_Uniqueness'),
        ),
        migrations.AddConstraint(
            model_name='anidetailxref',
            constraint=models.UniqueConstraint(fields=('evnt_id', 'contx_id', 'loc_id', 'indvt_id', 'indv_id', 'pair_id', 'grp_id'), name='Animal_Detail_Cross_Reference_Uniqueness'),
        ),
    ]
